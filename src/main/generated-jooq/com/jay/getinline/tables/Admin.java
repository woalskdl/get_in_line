/*
 * This file is generated by jOOQ.
 */
package com.jay.getinline.tables;


import com.jay.getinline.Getinline;
import com.jay.getinline.Indexes;
import com.jay.getinline.Keys;
import com.jay.getinline.tables.records.AdminRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Admin extends TableImpl<AdminRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>getinline.admin</code>
     */
    public static final Admin ADMIN = new Admin();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdminRecord> getRecordType() {
        return AdminRecord.class;
    }

    /**
     * The column <code>getinline.admin.id</code>.
     */
    public final TableField<AdminRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>getinline.admin.created_at</code>.
     */
    public final TableField<AdminRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>getinline.admin.email</code>.
     */
    public final TableField<AdminRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>getinline.admin.memo</code>.
     */
    public final TableField<AdminRecord, String> MEMO = createField(DSL.name("memo"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>getinline.admin.modified_at</code>.
     */
    public final TableField<AdminRecord, LocalDateTime> MODIFIED_AT = createField(DSL.name("modified_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>getinline.admin.nickname</code>.
     */
    public final TableField<AdminRecord, String> NICKNAME = createField(DSL.name("nickname"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>getinline.admin.password</code>.
     */
    public final TableField<AdminRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>getinline.admin.phone_number</code>.
     */
    public final TableField<AdminRecord, String> PHONE_NUMBER = createField(DSL.name("phone_number"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private Admin(Name alias, Table<AdminRecord> aliased) {
        this(alias, aliased, null);
    }

    private Admin(Name alias, Table<AdminRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>getinline.admin</code> table reference
     */
    public Admin(String alias) {
        this(DSL.name(alias), ADMIN);
    }

    /**
     * Create an aliased <code>getinline.admin</code> table reference
     */
    public Admin(Name alias) {
        this(alias, ADMIN);
    }

    /**
     * Create a <code>getinline.admin</code> table reference
     */
    public Admin() {
        this(DSL.name("admin"), null);
    }

    public <O extends Record> Admin(Table<O> child, ForeignKey<O, AdminRecord> key) {
        super(child, key, ADMIN);
    }

    @Override
    public Schema getSchema() {
        return Getinline.GETINLINE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ADMIN_IDX2W1TG47E7NYWR4SS5F5O6DEEH, Indexes.ADMIN_IDXF712BLMN5YX7C70U10ITPUGMR, Indexes.ADMIN_IDXL4RY5K9T9G70NOFFCVFLYNFIP);
    }

    @Override
    public Identity<AdminRecord, Long> getIdentity() {
        return (Identity<AdminRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AdminRecord> getPrimaryKey() {
        return Keys.KEY_ADMIN_PRIMARY;
    }

    @Override
    public List<UniqueKey<AdminRecord>> getKeys() {
        return Arrays.<UniqueKey<AdminRecord>>asList(Keys.KEY_ADMIN_PRIMARY, Keys.KEY_ADMIN_UK_C0R9ATAMXVBHJJVY5J8DA1KAM, Keys.KEY_ADMIN_UK_RR9FV9WXQKIJJVFBTUUYLIH7W);
    }

    @Override
    public Admin as(String alias) {
        return new Admin(DSL.name(alias), this);
    }

    @Override
    public Admin as(Name alias) {
        return new Admin(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Admin rename(String name) {
        return new Admin(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Admin rename(Name name) {
        return new Admin(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, LocalDateTime, String, String, LocalDateTime, String, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
